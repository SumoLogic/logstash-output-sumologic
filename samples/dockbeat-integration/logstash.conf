input {
  beats {
    port => 5044
  }
}

filter {

  # if [type] == "cpu" {
  #   metrics {
  #     timer => {
  #       "cpu.totalUsage" => "%{[cpu][totalUsage]}"
  #       "cpu.usageInKernelmode" => "%{[cpu][usageInKernelmode]}"
  #       "cpu.usageInUsermode" => "%{[cpu][usageInUsermode]}"
  #     }
  #     keep_field => ["host", "containerName", "containerID", "type"]
  #   }
  # }

  # if [type] == "container" {
  #   metrics {
  #     timer => {
  #       "container.sizeRootFs" => "%{[container][sizeRootFs]}"
  #       "container.sizeRw" => "%{[container][sizeRw]}"
  #     }
  #     keep_field => ["host", "containerName", "containerID", "type"]
  #   }
  # }

  # if [type] == "blkio" {
  #   metrics {
  #     timer => {
  #       "blkio.write_ps" => "%{[blkio][write_ps]}"
  #       "blkio.read_ps" => "%{[blkio][read_ps]}"
  #       "blkio.total_ps" => "%{[blkio][total_ps]}"
  #     }
  #     keep_field => ["host", "containerName", "containerID", "type"]
  #   }
  # }
  
  # if [type] == "net" {
  #   metrics {
  #     timer => {
  #       "net.txBytes_ps" => "%{[net][txBytes_ps]}"
  #       "net.txDropped_ps" => "%{[net][txDropped_ps]}"
  #       "net.txErrors_ps" => "%{[net][txErrors_ps]}"
  #       "net.txPackets_ps" => "%{[net][txPackets_ps]}"
  #       "net.rxBytes_ps" => "%{[net][rxBytes_ps]}"
  #       "net.rxDropped_ps" => "%{[net][rxDropped_ps]}"
  #       "net.rxErrors_ps" => "%{[net][rxErrors_ps]}"
  #       "net.rxPackets_ps" => "%{[net][rxPackets_ps]}"
  #     }
  #     keep_field => ["host", "containerName", "containerID", "type"]
  #   }
  # }

  # if [type] == "memory" {
  #   metrics {
  #     timer => {
  #       "memory.failcnt" => "%{[memory][failcnt]}"
  #       "memory.totalRss_p" => "%{[memory][totalRss_p]}"
  #       "memory.usage" => "%{[memory][usage]}"
  #       "memory.limit" => "%{[memory][limit]}"
  #       "memory.maxUsage" => "%{[memory][maxUsage]}"
  #       "memory.totalRss" => "%{[memory][totalRss]}"
  #       "memory.usage_p" => "%{[memory][usage_p]}"
  #     }
  #     keep_field => ["host", "containerName", "containerID", "type"]
  #   }
  # }
}

output {
  sumologic {
      url => "${SUMO_HTTP_URL}"
      source_name => "${SUMO_SOURCE_NAME}"
      source_category => "${SUMO_SOURCE_CATEGORY}"
      fields_as_metrics => true
      fields_exclude => ".*\.count"
      intrinsic_tags => {
        "dockerHost" => "%{host}"
        "containerName" => "%{containerName}"
        "containerID" => "%{containerID}"
      }
      meta_tags => {
        "type" => "%{type}"
      }
  }
  # Configuration for only sending specific metrics
  #
  # sumologic {
  #     url => "${SUMO_HTTP_URL}"
  #     source_name => "${SUMO_SOURCE_NAME}"
  #     source_category => "${SUMO_SOURCE_CATEGORY}"
  #     metrics => {
  #       "cpu.totalUsage" => "%{[cpu][totalUsage]}"
  #       "cpu.usageInKernelmode" => "%{[cpu][usageInKernelmode]}"
  #       "cpu.usageInUsermode" => "%{[cpu][usageInUsermode]}"
  #     }
  #     intrinsic_tags => {
  #       "host" => "%{host}"
  #       "containerName" => "%{containerName}"
  #       "containerID" => "%{containerID}"
  #     }
  #     meta_tags => {
  #       "dockerSocket" => "%{dockerSocket}"
  #       "type" => "%{type}"
  #     }
  # }
  #
  # Configuration for sending json as log
  #
  # sumologic {
  #   url => "${SUMO_HTTP_URL}"
  #   source_name => "${SUMO_SOURCE_NAME}"
  #   source_category => "${SUMO_SOURCE_CATEGORY}"
  #   format => "%{@json}"
  # }
}
